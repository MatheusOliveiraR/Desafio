[{"C:\\Users\\mathe\\Downloads\\desafio\\frontend-desafio\\src\\index.tsx":"1","C:\\Users\\mathe\\Downloads\\desafio\\frontend-desafio\\src\\App.tsx":"2","C:\\Users\\mathe\\Downloads\\desafio\\frontend-desafio\\src\\Body\\BodyRegister.tsx":"3","C:\\Users\\mathe\\Downloads\\desafio\\frontend-desafio\\src\\Body\\BodyList.tsx":"4"},{"size":423,"mtime":1670429733496,"results":"5","hashOfConfig":"6"},{"size":1162,"mtime":1670382430794,"results":"7","hashOfConfig":"6"},{"size":2260,"mtime":1670429435564,"results":"8","hashOfConfig":"6"},{"size":8347,"mtime":1670429353110,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15fmcvx",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},"C:\\Users\\mathe\\Downloads\\desafio\\frontend-desafio\\src\\index.tsx",[],[],"C:\\Users\\mathe\\Downloads\\desafio\\frontend-desafio\\src\\App.tsx",["25","26"],[],"import React from 'react';\nimport {  Layout, Menu, theme } from 'antd';\nimport {Routes, Route, useNavigate} from 'react-router-dom';\nimport Body from './Body/BodyRegister';\nimport BodyList from './Body/BodyList';\n\nconst { Header, Footer } = Layout;\n\nconst App: React.FC = () => {  \n  const {\n  } = theme.useToken();\n\n\n  \n  const navigate = useNavigate();\n\n  return (  \n    <Layout className=\"layout\">\n        <div className=\"logo\" />\n        <Menu\n        onClick={({key})=>{\n          navigate(key)\n\n        }}\n          theme=\"dark\"\n          mode=\"horizontal\"\n          defaultSelectedKeys={[window.location.pathname]}          \n          items={[\n            {label: \"Cadastro\", key: \"/register\"},\n            {label: \"Listar, Deletar e Atualizar\", key: \"/list\"},\n          ]}\n        ></Menu>\n        <Content/>\n      <Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>\n    </Layout>\n  );\n};\n\nfunction Content(){\n  return <div>\n    <Routes>\n      <Route path=\"/register\" element={<div><Body/></div>}></Route> \n      <Route path=\"/list\" element={<div><BodyList/></div>}></Route>\n    </Routes>\n  </div>\n}\n\nexport default App;","C:\\Users\\mathe\\Downloads\\desafio\\frontend-desafio\\src\\Body\\BodyRegister.tsx",[],[],"C:\\Users\\mathe\\Downloads\\desafio\\frontend-desafio\\src\\Body\\BodyList.tsx",["27","28"],[],"import { FunnelPlotOutlined, SearchOutlined } from '@ant-design/icons';\r\nimport { DatePicker, Form, InputRef, Select } from 'antd';\r\nimport { Button, Input, Space, Table, Popconfirm } from 'antd';\r\nimport type { ColumnsType, ColumnType} from 'antd/es/table';\r\nimport type { FilterConfirmProps } from 'antd/es/table/interface';\r\nimport React, { useRef, useState, useEffect } from 'react';\r\nimport Highlighter from 'react-highlight-words';\r\nimport axios from 'axios'\r\nimport Modal from 'antd/es/modal/Modal';\r\nimport InputMask  from 'react-input-mask';\r\n\r\ninterface DataType {\r\n  id: number;\r\n  name: string;\r\n  gender: string;\r\n  birthDate: string;\r\n  email: string;\r\n  phoneNumber: string;\r\n}\r\ntype DataIndex = keyof DataType;\r\nconst App: React.FC = () => {  \r\n\r\n  const [form] = Form.useForm();\r\n  const { Option } = Select;\r\n  const [dataSource, setDataSource] = useState<DataType[]>([]);\r\n  const [update, setUpdate] = useState(false);\r\n  const [personUpdate, setPersonUpdate]= useState<any>();\r\n\r\n  useEffect(() =>{\r\n    axios.get(\"http://localhost:8080/person\")\r\n    .then(response =>{\r\n      setDataSource(response.data)\r\n    })\r\n  }, [])\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const [searchedColumn, setSearchedColumn] = useState('');\r\n  const searchInput = useRef<InputRef>(null);\r\n  const handleSearch = (\r\n    selectedKeys: string[],\r\n    confirm: (param?: FilterConfirmProps) => void,\r\n    dataIndex: DataIndex,\r\n  ) => {\r\n    confirm();\r\n    setSearchText(selectedKeys[0]);\r\n    setSearchedColumn(dataIndex);\r\n  };\r\n\r\n    const handleDelete = (record: any) => {\r\n      axios.delete(\"http://localhost:8080/person/\"+record['email'])\r\n      .then(response=>{\r\n        alert(\"Pessoa \"+ record['name'] +\" deletado com sucesso!\")        \r\n        window.location.reload()\r\n      })\r\n      .catch((error)=>{\r\n        alert(error.response.data)\r\n      })\r\n    };\r\n  const handleReset = (clearFilters: () => void) => {\r\n    clearFilters();\r\n    setSearchText('');\r\n  };\r\n\r\n  function handleUpdate(record: any): void { \r\n    setPersonUpdate({...record})\r\n    setUpdate(true)    \r\n  }  \r\n\r\n  function finish(value: any){  \r\n    axios.put(\"http://localhost:8080/person/\"+personUpdate.id, personUpdate)\r\n      .then(()=>{\r\n        alert(\"Atualizado com sucesso!\")\r\n        window.location.reload()\r\n        setUpdate(false);\r\n      })\r\n      .catch((error)=>{\r\n        alert(error.response.data) \r\n      }) \r\n  }\r\n\r\n  const getColumnSearchProps = (dataIndex: DataIndex): ColumnType<DataType> => ({\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters, close }) => (\r\n      <div style={{ padding: 8 }} onKeyDown={e => e.stopPropagation()}>\r\n        <Input\r\n          ref={searchInput}\r\n          placeholder={`Buscar ${dataIndex}`}\r\n          value={selectedKeys[0]}\r\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n          onPressEnter={() => handleSearch(selectedKeys as string[], confirm, dataIndex)}\r\n          style={{ marginBottom: 8, display: 'block' }}\r\n        />\r\n        <Space>\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => handleSearch(selectedKeys as string[], confirm, dataIndex)}\r\n            icon={<SearchOutlined />}\r\n            size=\"small\"\r\n            style={{ width: 90 }}\r\n          >\r\n            Buscar\r\n          </Button>\r\n          <Button\r\n            type=\"primary\"\r\n            size=\"small\"\r\n            icon={<FunnelPlotOutlined />}\r\n            onClick={() => {\r\n              confirm({ closeDropdown: false });\r\n              setSearchText((selectedKeys as string[])[0]);\r\n              setSearchedColumn(dataIndex);\r\n            }}\r\n          >\r\n            Filtrar\r\n          </Button>\r\n\r\n          <Button\r\n            onClick={() => clearFilters && handleReset(clearFilters)}\r\n            size=\"small\"\r\n            style={{ width: 90 }}\r\n          >\r\n            Resetar\r\n          </Button>\r\n\r\n          <Button\r\n            type=\"link\"\r\n            size=\"small\"\r\n            onClick={() => {\r\n              close();\r\n            }}\r\n          >\r\n            Fechar\r\n          </Button>\r\n        </Space>\r\n      </div>\r\n    ),\r\n    filterIcon: (filtered: boolean) => (\r\n      <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />\r\n    ),\r\n    onFilter: (value, record) =>\r\n      record[dataIndex]\r\n        .toString()\r\n        .toLowerCase()\r\n        .includes((value as string).toLowerCase()),\r\n    onFilterDropdownOpenChange: visible => {\r\n      if (visible) {\r\n        setTimeout(() => searchInput.current?.select(), 100);\r\n      }\r\n    },\r\n    render: text =>\r\n      searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  const columns: ColumnsType<DataType> = [\r\n    {\r\n      title: 'Nome',\r\n      dataIndex: 'name',\r\n      ...getColumnSearchProps('name'),\r\n    },\r\n    {\r\n      title: 'Email',\r\n      dataIndex: 'email',\r\n      ...getColumnSearchProps('email'),\r\n    },\r\n    {\r\n      title: 'Idade',\r\n      dataIndex: 'birthDate',\r\n    },\r\n    {\r\n      title:'Genêro',\r\n      dataIndex: 'gender',\r\n    },\r\n    {\r\n      title: 'Telefone',\r\n      dataIndex: 'phoneNumber',\r\n    },\r\n    {\r\n      title: \"Ações\",\r\n      dataIndex:'',\r\n      render: (record) =>\r\n      dataSource.length >= 1 ? (\r\n        <><Popconfirm title=\"Você tem certeza que deseja deletar essa pessoa?\" onConfirm={() => handleDelete(record)}>\r\n            <a>Deletar</a>\r\n          </Popconfirm>\r\n          <Popconfirm  title=\"Você tem certeza que deseja editar essa pessoa?\" onConfirm={() => {\r\n            handleUpdate(record)}} >\r\n              <a style={{paddingLeft:15}}>Editar</a>\r\n            </Popconfirm></>\r\n      ) : null,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        <Table columns={columns} dataSource={dataSource}></Table>\r\n        <Modal title=\"Editando\" open={update} onCancel={()=>{setUpdate(false)}}\r\n        okButtonProps={{ style: { display: 'none' } }}\r\n        > \r\n              <Form form={form}  onFinish={finish}>\r\n\r\n                <Form.Item label= \"Nome completo\" rules={[{required: true}]}>\r\n                  <Input value={[personUpdate?.name]} onChange={(e)=>{\r\n                    setPersonUpdate((pre: any)=>{\r\n                      return {...pre, name:e.target.value}\r\n                    })\r\n                  }}></Input>\r\n                </Form.Item>\r\n\r\n                <Form.Item label= \"Genêro\">\r\n                  <Select placeholder={personUpdate?.gender}>\r\n                  <Option value=\"Masculino\" >Masculino</Option>\r\n                  <Option value=\"Feminino\">Feminino</Option>\r\n                  <Option value=\"Outro\">Outro</Option>\r\n                  </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label = \"Data de nascimento\">\r\n                  <DatePicker picker='date'\r\n                  placeholder= {personUpdate?.birthDate}\r\n                   format={\"DD/MM/YYYY\"}\r\n                  ></DatePicker>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                label='email'\r\n                rules={[{type:'email',message: \"Este email não é valido\"}]}>\r\n                  <Input value={[personUpdate?.email]} onChange={(e)=>{\r\n                    setPersonUpdate((pre: any)=>{\r\n                      return {...pre, email:e.target.value}\r\n                    })\r\n                  }}></Input>                  \r\n                </Form.Item>\r\n\r\n                <Form.Item label = \"Telefone\"  rules={[{type:'number'}]}>\r\n                  <InputMask style={{borderColor:\"#d9d9d9\",}}\r\n                   mask=\"(99) 99999-9999\" value={personUpdate?.phoneNumber} onChange={(e)=>{\r\n                    setPersonUpdate((pre: any)=>{\r\n                      return {...pre, phoneNumber:e.target.value}\r\n                    })\r\n                  }}/>                  \r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                  <Button type='primary' htmlType='submit'>Salvar</Button>\r\n                  </Form.Item>\r\n\r\n              </Form>\r\n        </Modal>\r\n      </header>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n",[],{"ruleId":"29","severity":1,"message":"30","line":7,"column":9,"nodeType":"31","messageId":"32","endLine":7,"endColumn":15},{"ruleId":"33","severity":1,"message":"34","line":10,"column":9,"nodeType":"35","messageId":"36","endLine":11,"endColumn":4},{"ruleId":"37","severity":1,"message":"38","line":190,"column":13,"nodeType":"39","endLine":190,"endColumn":16},{"ruleId":"37","severity":1,"message":"38","line":194,"column":15,"nodeType":"39","endLine":194,"endColumn":43},"@typescript-eslint/no-unused-vars","'Header' is assigned a value but never used.","Identifier","unusedVar","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement"]