{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mathe\\\\Downloads\\\\desafio\\\\frontend-desafio\\\\src\\\\Body\\\\BodyList.tsx\",\n  _s = $RefreshSig$();\nimport { Table } from 'antd';\nimport qs from 'qs';\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  sorter: true,\n  render: name => `${name.first} ${name.last}`,\n  width: '20%'\n}, {\n  title: 'Gender',\n  dataIndex: 'gender',\n  filters: [{\n    text: 'Male',\n    value: 'male'\n  }, {\n    text: 'Female',\n    value: 'female'\n  }],\n  width: '20%'\n}, {\n  title: 'Email',\n  dataIndex: 'email'\n}];\nconst getRandomuserParams = params => {\n  var _params$pagination, _params$pagination2;\n  return {\n    results: (_params$pagination = params.pagination) === null || _params$pagination === void 0 ? void 0 : _params$pagination.pageSize,\n    page: (_params$pagination2 = params.pagination) === null || _params$pagination2 === void 0 ? void 0 : _params$pagination2.current,\n    ...params\n  };\n};\nconst App = () => {\n  _s();\n  const [data, setData] = useState();\n  const [loading, setLoading] = useState(false);\n  const [tableParams, setTableParams] = useState({\n    pagination: {\n      current: 1,\n      pageSize: 10\n    }\n  });\n  const fetchData = () => {\n    setLoading(true);\n    fetch(`https://randomuser.me/api?${qs.stringify(getRandomuserParams(tableParams))}`).then(res => res.json()).then(_ref => {\n      let {\n        results\n      } = _ref;\n      setData(results);\n      setLoading(false);\n      setTableParams({\n        ...tableParams,\n        pagination: {\n          ...tableParams.pagination,\n          total: 200\n          // 200 is mock data, you should read it from server\n          // total: data.totalCount,\n        }\n      });\n    });\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [JSON.stringify(tableParams)]);\n  const handleTableChange = (pagination, filters, sorter) => {\n    setTableParams({\n      pagination,\n      filters,\n      ...sorter\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Table, {\n    columns: columns,\n    dataSource: data,\n    pagination: tableParams.pagination,\n    loading: loading,\n    onChange: handleTableChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"0Y7aurYTKDPjppht6XFvv6MFZtY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Table","qs","React","useEffect","useState","columns","title","dataIndex","sorter","render","name","first","last","width","filters","text","value","getRandomuserParams","params","results","pagination","pageSize","page","current","App","data","setData","loading","setLoading","tableParams","setTableParams","fetchData","fetch","stringify","then","res","json","total","JSON","handleTableChange"],"sources":["C:/Users/mathe/Downloads/desafio/frontend-desafio/src/Body/BodyList.tsx"],"sourcesContent":["import { Table } from 'antd';\r\nimport type { ColumnsType, TablePaginationConfig } from 'antd/es/table';\r\nimport type { FilterValue, SorterResult } from 'antd/es/table/interface';\r\nimport qs from 'qs';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\ninterface DataType {\r\n  name: string;\r\n  gender: string;\r\n  email: string;\r\n  phone: string;\r\n  birth: number;\r\n}\r\n\r\ninterface TableParams {\r\n  pagination?: TablePaginationConfig;\r\n  sortField?: string;\r\n  sortOrder?: string;\r\n  filters?: Record<string, FilterValue>;\r\n}\r\n\r\nconst columns: ColumnsType<DataType> = [\r\n  {\r\n    title: 'Name',\r\n    dataIndex: 'name',\r\n    sorter: true,\r\n    render: name => `${name.first} ${name.last}`,\r\n    width: '20%',\r\n  },\r\n  {\r\n    title: 'Gender',\r\n    dataIndex: 'gender',\r\n    filters: [\r\n      { text: 'Male', value: 'male' },\r\n      { text: 'Female', value: 'female' },\r\n    ],\r\n    width: '20%',\r\n  },\r\n  {\r\n    title: 'Email',\r\n    dataIndex: 'email',\r\n  },\r\n];\r\n\r\nconst getRandomuserParams = (params: TableParams) => ({\r\n  results: params.pagination?.pageSize,\r\n  page: params.pagination?.current,\r\n  ...params,\r\n});\r\n\r\nconst App: React.FC = () => {\r\n  const [data, setData] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  const [tableParams, setTableParams] = useState<TableParams>({\r\n    pagination: {\r\n      current: 1,\r\n      pageSize: 10,\r\n    },\r\n  });\r\n\r\n  const fetchData = () => {\r\n    setLoading(true);\r\n    fetch(`https://randomuser.me/api?${qs.stringify(getRandomuserParams(tableParams))}`)\r\n      .then(res => res.json())\r\n      .then(({ results }) => {\r\n        setData(results);\r\n        setLoading(false);\r\n        setTableParams({\r\n          ...tableParams,\r\n          pagination: {\r\n            ...tableParams.pagination,\r\n            total: 200,\r\n            // 200 is mock data, you should read it from server\r\n            // total: data.totalCount,\r\n          },\r\n        });\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [JSON.stringify(tableParams)]);\r\n\r\n  const handleTableChange = (\r\n    pagination: TablePaginationConfig,\r\n    filters: Record<string, FilterValue>,\r\n    sorter: SorterResult<DataType>,\r\n  ) => {\r\n    setTableParams({\r\n      pagination,\r\n      filters,\r\n      ...sorter,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Table\r\n      columns={columns}\r\n      dataSource={data}\r\n      pagination={tableParams.pagination}\r\n      loading={loading}\r\n      onChange={handleTableChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":";;AAAA,SAASA,KAAK,QAAQ,MAAM;AAG5B,OAAOC,EAAE,MAAM,IAAI;AACnB,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAiBnD,MAAMC,OAA8B,GAAG,CACrC;EACEC,KAAK,EAAE,MAAM;EACbC,SAAS,EAAE,MAAM;EACjBC,MAAM,EAAE,IAAI;EACZC,MAAM,EAAEC,IAAI,IAAK,GAAEA,IAAI,CAACC,KAAM,IAAGD,IAAI,CAACE,IAAK,EAAC;EAC5CC,KAAK,EAAE;AACT,CAAC,EACD;EACEP,KAAK,EAAE,QAAQ;EACfC,SAAS,EAAE,QAAQ;EACnBO,OAAO,EAAE,CACP;IAAEC,IAAI,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAO,CAAC,EAC/B;IAAED,IAAI,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAAS,CAAC,CACpC;EACDH,KAAK,EAAE;AACT,CAAC,EACD;EACEP,KAAK,EAAE,OAAO;EACdC,SAAS,EAAE;AACb,CAAC,CACF;AAED,MAAMU,mBAAmB,GAAIC,MAAmB;EAAA;EAAA,OAAM;IACpDC,OAAO,wBAAED,MAAM,CAACE,UAAU,uDAAjB,mBAAmBC,QAAQ;IACpCC,IAAI,yBAAEJ,MAAM,CAACE,UAAU,wDAAjB,oBAAmBG,OAAO;IAChC,GAAGL;EACL,CAAC;AAAA,CAAC;AAEF,MAAMM,GAAa,GAAG,MAAM;EAAA;EAC1B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGtB,QAAQ,EAAE;EAClC,MAAM,CAACuB,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACyB,WAAW,EAAEC,cAAc,CAAC,GAAG1B,QAAQ,CAAc;IAC1DgB,UAAU,EAAE;MACVG,OAAO,EAAE,CAAC;MACVF,QAAQ,EAAE;IACZ;EACF,CAAC,CAAC;EAEF,MAAMU,SAAS,GAAG,MAAM;IACtBH,UAAU,CAAC,IAAI,CAAC;IAChBI,KAAK,CAAE,6BAA4B/B,EAAE,CAACgC,SAAS,CAAChB,mBAAmB,CAACY,WAAW,CAAC,CAAE,EAAC,CAAC,CACjFK,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC,CACvBF,IAAI,CAAC,QAAiB;MAAA,IAAhB;QAAEf;MAAQ,CAAC;MAChBO,OAAO,CAACP,OAAO,CAAC;MAChBS,UAAU,CAAC,KAAK,CAAC;MACjBE,cAAc,CAAC;QACb,GAAGD,WAAW;QACdT,UAAU,EAAE;UACV,GAAGS,WAAW,CAACT,UAAU;UACzBiB,KAAK,EAAE;UACP;UACA;QACF;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACN,CAAC;;EAEDlC,SAAS,CAAC,MAAM;IACd4B,SAAS,EAAE;EACb,CAAC,EAAE,CAACO,IAAI,CAACL,SAAS,CAACJ,WAAW,CAAC,CAAC,CAAC;EAEjC,MAAMU,iBAAiB,GAAG,CACxBnB,UAAiC,EACjCN,OAAoC,EACpCN,MAA8B,KAC3B;IACHsB,cAAc,CAAC;MACbV,UAAU;MACVN,OAAO;MACP,GAAGN;IACL,CAAC,CAAC;EACJ,CAAC;EAED,oBACE,QAAC,KAAK;IACJ,OAAO,EAAEH,OAAQ;IACjB,UAAU,EAAEoB,IAAK;IACjB,UAAU,EAAEI,WAAW,CAACT,UAAW;IACnC,OAAO,EAAEO,OAAQ;IACjB,QAAQ,EAAEY;EAAkB;IAAA;IAAA;IAAA;EAAA,QAC5B;AAEN,CAAC;AAAC,GAtDIf,GAAa;AAAA,KAAbA,GAAa;AAwDnB,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}